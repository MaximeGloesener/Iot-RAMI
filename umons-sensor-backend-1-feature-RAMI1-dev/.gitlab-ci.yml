stages:
  - lint
  - build
  - test
  - pages
  - build-images
  - deploy
  - database

lint:
  image: node:lts
  stage: lint
  script:
    - npm install --progress=false
    - npm run format

build:
  image: node:lts
  stage: build
  needs:
    - lint
  artifacts:
    paths:
      - dist/
  script:
    - npm install --progress=false
    - npm run build

test-coverage:
  image: node:lts
  stage: test
  needs:
    - build
  artifacts:
    paths:
      - coverage/
  script:
    - npm install --progress=false
    - npm run test:coverage
  coverage: /All files\s*\|\s*([\d\.]+)/

pages:
  stage: pages
  needs:
    - test-coverage
  only:
    - main
    - feature/10-add-environment-file-in-gitlab-secret
  script:
    - mv coverage/ public/
  artifacts:
    paths:
      - public
    expire_in: 4 week

.install-bash: &install-bash
  - apk update
  - apk upgrade
  - apk add bash

.create-env-file: &create-env-file
  - echo "Creating .env.$CI_ENVIRONMENT_NAME file..."
  - echo "# Database" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_VERSION=$CI_DB_VERSION" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_CONTAINER_NAME=$CI_DB_CONTAINER_NAME" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_PORT_IN=$CI_DB_PORT_IN" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_PORT_OUT=$CI_DB_PORT_OUT" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_NAME=$CI_DB_NAME" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_USER=$CI_DB_USER" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_PASSWORD=$CI_DB_PASSWORD" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_HOST=$CI_DB_HOST" >> .env.$CI_ENVIRONMENT_NAME
  - echo "DB_DIALECT=$CI_DB_DIALECT" >> .env.$CI_ENVIRONMENT_NAME
  - echo "# JWT" >> .env.$CI_ENVIRONMENT_NAME
  - echo "JWT_SECRET=$CI_JWT_SECRET" >> .env.$CI_ENVIRONMENT_NAME
  - echo "JWT_EXPIRATION=$CI_JWT_EXPIRATION" >> .env.$CI_ENVIRONMENT_NAME
  - echo "# Bcrypt" >> .env.$CI_ENVIRONMENT_NAME
  - echo "BCRYPT_SALT_ROUNDS=$CI_BCRYPT_SALT_ROUNDS" >> .env.$CI_ENVIRONMENT_NAME
  - echo "# APP" >> .env.$CI_ENVIRONMENT_NAME
  - echo "NODE_CONTAINER_NAME=$CI_NODE_CONTAINER_NAME" >> .env.$CI_ENVIRONMENT_NAME
  - echo "NODE_PORT_IN=$CI_NODE_PORT_IN" >> .env.$CI_ENVIRONMENT_NAME
  - echo "NODE_PORT_OUT=$CI_NODE_PORT_OUT" >> .env.$CI_ENVIRONMENT_NAME
  - echo "NODE_HOST=$CI_NODE_HOST" >> .env.$CI_ENVIRONMENT_NAME
  - echo "NODE_ENV=$CI_NODE_ENV" >> .env.$CI_ENVIRONMENT_NAME
  - echo "# PM2" >> .env.$CI_ENVIRONMENT_NAME
  - echo "PM2_PUBLIC_KEY=$CI_PM2_PUBLIC_KEY" >> .env.$CI_ENVIRONMENT_NAME
  - echo "PM2_SECRET_KEY=$CI_PM2_SECRET_KEY" >> .env.$CI_ENVIRONMENT_NAME
  - echo "PM2_INSTANCES=$CI_PM2_INSTANCES" >> .env.$CI_ENVIRONMENT_NAME
  - echo "# Gitlab" >> .env.$CI_ENVIRONMENT_NAME
  - echo "CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE" >> .env.$CI_ENVIRONMENT_NAME
  - echo "CI_COMMIT_SHA=$CI_COMMIT_SHA" >> .env.$CI_ENVIRONMENT_NAME
  - echo "Done."

.docker-build-template: &docker-build-template
  image: docker:stable
  stage: build-images
  tags:
    - simu1
  needs:
    - test-coverage
  before_script:
    - *install-bash
    - *create-env-file
  script:
    - ./.run.sh --env staging --function docker_login
    - ./.run.sh --env staging --function docker_build
    - ./.run.sh --env staging --function docker_push
    - ./.run.sh --env staging --function docker_tag_latest
    - ./.run.sh --env staging --function docker_push_latest

docker-build:
  <<: *docker-build-template
  environment:
    name: staging
    url: https://dev-api.rami.ig.umons.ac.be
  only:
    - main
    - develop
    - feature/10-add-environment-file-in-gitlab-secret

docker-build-tag:
  <<: *docker-build-template
  environment:
    name: production
    url: https://api.rami.ig.umons.ac.be
  tags:
    - simu1
  needs:
    - test-coverage
  only:
    - tags
  script:
    - ./.run.sh --env production --function docker_build_tag
    - ./.run.sh --env production --function docker_push_tag

.install-ssh: &install-ssh
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
  - eval $(ssh-agent -s)
  - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh


.deploy-template: &deploy-template
  stage: deploy
  tags:
    - simu1
  before_script:
    - *install-ssh
    - *install-bash
    - *create-env-file
  script:
    - 'scp -o StrictHostKeyChecking=no docker-compose.yml .env.$CI_ENVIRONMENT_NAME .run.sh $CI_SSH_USER@$CI_SSH_HOST:$CI_SSH_PATH'
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "./$CI_SSH_PATH/.run.sh --env $CI_ENVIRONMENT_NAME --function docker_stop --path ./$CI_SSH_PATH && ./$CI_SSH_PATH/.run.sh --env $CI_ENVIRONMENT_NAME --function docker_start --path ./$CI_SSH_PATH"

.migrate-database-template: &migrate-database-template
  stage: database
  tags:
    - simu1
  before_script:
    - *install-ssh
  script:
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "./$CI_SSH_PATH/.run.sh --env $CI_ENVIRONMENT_NAME --function docker_migrate --path $CI_SSH_PATH"

.seed-database-template: &seed-database-template
  stage: database
  tags:
    - simu1
  when: manual
  before_script:
    - *install-ssh
  script:
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "./$CI_SSH_PATH/.run.sh --env $CI_ENVIRONMENT_NAME --function docker_seed --path $CI_SSH_PATH"

.undo-seed-database-template: &undo-seed-database-template
  stage: database
  tags:
    - simu1
  when: manual
  before_script:
    - *install-ssh
  script:
    - ssh -o StrictHostKeyChecking=no $CI_SSH_USER@$CI_SSH_HOST "./$CI_SSH_PATH/.run.sh --env $CI_ENVIRONMENT_NAME --function docker_undo_seed --path $CI_SSH_PATH"

deploy-prod:
  <<: *deploy-template
  environment:
    name: prod
    url: https://api.rami.ig.umons.ac.be
  needs:
    - docker-build-tag
  only:
    - tags

migration-prod:
  <<: *migrate-database-template
  environment:
    name: prod
    url: https://api.rami.ig.umons.ac.be
  needs:
    - deploy-prod
  tags:
    - simu1
  only:
    - tags


seed-prod:
  <<: *seed-database-template
  environment:
    name: prod
    url: https://api.rami.ig.umons.ac.be
  needs:
    - migration-prod
  only:
    - tags

undo-seed-prod:
  <<: *undo-seed-database-template
  environment:
    name: prod
    url: https://api.rami.ig.umons.ac.be
  needs:
    - migration-prod
  only:
    - tags

deploy-staging:
  <<: *deploy-template
  environment:
    name: staging
    url: https://dev-api.rami.ig.umons.ac.be
  needs:
    - docker-build
  only:
    - develop
    - feature/10-add-environment-file-in-gitlab-secret

migration-staging:
  <<: *migrate-database-template
  environment:
    name: staging
    url: https://dev-api.rami.ig.umons.ac.be
  needs:
    - deploy-staging
  only:
    - develop
    - feature/10-add-environment-file-in-gitlab-secret

seed-staging:
  <<: *seed-database-template
  environment:
    name: staging
    url: https://dev-api.rami.ig.umons.ac.be
  needs:
    - migration-staging
  only:
    - develop
    - feature/10-add-environment-file-in-gitlab-secret

undo-seed-staging:
  <<: *undo-seed-database-template
  environment:
    name: staging
    url: https://dev-api.rami.ig.umons.ac.be
  needs:
    - migration-staging
  only:
    - develop
    - feature/10-add-environment-file-in-gitlab-secret